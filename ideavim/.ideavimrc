set so=10 " Keep few lines visible when scrolling
set incsearch
set number relativenumber " Set relative line numbers
set timeoutlen=400

""" Editing and Reloading the Config
set clipboard+=unnamed
set clipboard+=ideaput
nnoremap \e :e ~/.ideavimrc<CR>
nnoremap \r :action IdeaVim.ReloadVimRc.reload<CR>

"" Plugins  --------------------------------
""" Wich-key Plugin  --------------------------------
" https://plugins.jetbrains.com/plugin/15976-which-key
set which-key

set notimeout
let g:WhichKey_ShowVimActions = "false"
let g:WhichKey_DefaultDelay = 1000



""" Surround Plugin  --------------------------------
" Emulates vim-surround. Mappings to easily delete, change and add such surroundings in pairs
" Basic Commands:
"   cs   Change surroundings
"   cst  Change surroundings tag
"   ds   Delete surroundings
"   dst  Delete surroundings tag
"   ys   Surround text object
" See https://github.com/tpope/vim-surround/blob/master/doc/surround.txt for details
set surround

""" argtextobj  Plugin  --------------------------------
" Emulates argtextobj. Provides a text-object 'a' for function arguments
" Text object
"   daa   Delete an argument
"   cia   Change inner argument.
"   via   Select inner argument.
" See https://www.vim.org/scripts/script.php?script_id=2699 for details
set argtextobj
let g:argtextobj_pairs="[:],(:),<:>"

"""  exchange Plugin  --------------------------------
" Emulates exchange.vim. Text exchange
" Basic Commands:
"   cx    First use to define the exchange, second use defines the second and exchange
"   cxx   Like cx for an entire line
"   X     Like cx for visual mode
" See https://www.vim.org/scripts/script.php?script_id=2699 for details
Plug 'tommcdo/vim-exchange'

""" easy motion plugin  --------------------------------
" Emulates vim-easymotion
" Make sure to install IdeaVim-EasyMotion and AceJump Plugins
" Basic Commands:
"   easy-motion-s Search backward
"   easy-motion-f Search forward
" See https://github.com/AlexPl292/IdeaVim-EasyMotion#supported-commands for details
Plug 'easymotion/vim-easymotion'
map S <Plug>(easymotion-s)
map s <Plug>(easymotion-f)

""" NERDTree plugin  --------------------------------
" Emulates NERDTree
" Basic Commands:
"   Ctrl-n  Open NERDTree (mapped bellow)
"   q	    Close the NERDTree window
"   o   	Open files, directories and bookmarks
"   go   	Open selected file, but leave cursor in the NERDTree
"   i   	Open selected file in a split window
"   gi   	Same as i, but leave the cursor on the NERDTree
"   s   	Open selected file in a new vsplit
"   gs   	Same as s, but leave the cursor on the NERDTree
"   <C-J>	Jump down to next sibling of the current directory
"   <C-K>	Jump up to previous sibling of the current directory
"   R	    Recursively refresh the current root
"   m	    Display the NERDTree menu
" See  https://github.com/JetBrains/ideavim/wiki/NERDTree-support for details
set NERDTree
map <c-n> :NERDTreeToggle<CR>

""" multiple-cursors plugin  --------------------------------
" Emulates vim-multiple-cursors
" Basic Commands:
"   <C-n> start multicursor
"   <C-n> next match
"   <C-x> skip next match
"   <C-p> remove current match and go back to previous one
" See https://github.com/terryma/vim-multiple-cursors for details
set multiple-cursors
map mc <A-n>
map mx <A-x>
map mp <A-p>

""" Commentary plugin  --------------------------------
Plug 'tpope/vim-commentary'

""" ReplaceWithRegister plugin  --------------------------------
" Emulates  ReplaceWithRegister
" Basic Commands:
"   [count]["x]grr          Replace [count] lines with the contents of register x.
"   {Visual}["x]gr          Replace the selection with the contents of register x.
" See https://github.com/vim-scripts/ReplaceWithRegister for details
Plug 'vim-scripts/ReplaceWithRegister'
let g:WhichKeyDesc_ReplaceWithRegisterVisual = "gr   Replace With Register (Visual)"
let g:WhichKeyDesc_ReplaceWithRegister = "grr   Replace With Register"


""" textobj-entire plugin  --------------------------------
" Emulates  vim-textobj-entire
" Basic Commands:
"   {motion}ae    Apply motion on entire text
"   {motion}ie    Apply motion on entire text w/o trailing and leading empty lines
" See https://github.com/kana/vim-textobj-entire for details
set textobj-entire

""" highlightedyank plugin  --------------------------------
" Emulates vim-highlightedyank
" Highlight yanked text
" See https://github.com/machakann/vim-highlightedyank for details
Plug 'machakann/vim-highlightedyank'

Plug 'michaeljsmith/vim-indent-object'


"" Common settings -------------------------
set clipboard+=unnamed " Clipboard sharing for Mac Os
set clipboard+=ideaput
set so=10 " Keep few lines visible when scrolling
set incsearch " Highlight the searching string while typing
set relativenumber " Set relative line numbers

""" The Escape button
map <C-c> <Esc>
inoremap jk <Esc>

""" The Leader Key
let mapleader=" "

""" Distraction Free Mode
nnoremap <c-z> :action ToggleDistractionFreeMode<CR>

""" Terminal
" Keymap/Other/Tool Windows View Mode
" DockPinnedMode  (ctrl+d)
" FloatMode       (ctrl+f)
" WindowMode      (ctrl+w)
"
nnoremap <c-t> :action ActivateTerminalToolWindow<CR>

""" Navigation (ctrl+w -> hjkl
nnoremap <c-\> :action SplitVertically<CR>
nnoremap <c--> :action SplitHorizontally<CR>
nnoremap <c-m> :action MoveEditorToOppositeTabGroup<CR>

nnoremap <TAB> :action PreviousTab<CR>
nnoremap <s-TAB> :action NextTab<CR>

"nnoremap <Leader>e :action EditSourceInNewWindow<CR>
"sethandler <D-n> a:vim
"nnoremap <D-n> :action NextWindow<CR>

nnoremap ;q :action CloseContent<CR>
let g:WhichKeyDesc_CloseContent= ";q Close Content"
nnoremap ;a :action CloseAllEditors<CR>
let g:WhichKeyDesc_CloseAllEditors= ";a Close All Content"

""" Editing source code
set ideajoin
set idearefactormode=keep

vnoremap < <gv
vnoremap > >gv

nnoremap [[ :action MethodUp<CR>
nnoremap ]] :action MethodDown<CR>

nnoremap zc :action CollapseRegion<CR>
let g:WhichKeyDesc_ClollapseRegion= "zc Collaps Region"

nnoremap zo :action ExpandRegion<CR>
let g:WhichKeyDesc_ExpandRegion= "zo Expand Region"

nnoremap <leader>zc :action CollapseAllRegions<CR>
let g:WhichKeyDesc_CollapseAllRegions= "<leader>zc Collaps All Region"

nnoremap <leader>zo :action ExpandAllRegions<CR>
let g:WhichKeyDesc_ExpandAllRegions= "<leader>zo Expand All Region"

nnoremap <leader>c :action CommentByLineComment<CR>
let g:WhichKeyDesc_CommentByLineComment= "<leader>c Comment Line"


nnoremap <leader>r :action Refactorings.QuickListPopupAction<CR>
let g:WhichKeyDesc_QuickListPopupActions= "<leader>r Refactor This"

nnoremap <leader>o :action OptimizeImports<CR>
let g:WhichKeyDesc_OptimizeImports= "<leader>o Optimize Imports"

nnoremap <leader>l :action RecentLocations<CR>
let g:WhichKeyDesc_RecentLocations= "<leader>l Recent Locations"

nnoremap <leader>h  :action LocalHistory.ShowHistory<CR>
let g:WhichKeyDesc_ShowHistory= "<leader>h Show History"

nnoremap ge :action GotoNextError<CR>
let g:WhichKeyDesc_GotoNextError= "ge Go to Next Error"

nnoremap gE :action GotoPreviousError<CR>
let g:WhichKeyDesc_GotoPreviousError= "gE Go to Previous Error"

""" Searching and Source Code Navigation
set incsearch

nnoremap <leader>gs :action GotoSymbol<CR>
let g:WhichKeyDesc_GotoSymbol= "<leader>gs Go to Symbol"

nnoremap <leader>gc :action GotoClass<CR>
let g:WhichKeyDesc_GotoClass= "<leader>gc Go to Class"

nnoremap <leader>gr :action RecentFiles<CR>
let g:WhichKeyDesc_RecentFiles= "<leader>gr Recent Files"

nnoremap <leader>ga :action GotoAction<CR>
let g:WhichKeyDesc_GotoAction = "<leader>ga Go to Action"

nnoremap <leader>gf :action GotoFile<CR>
let g:WhichKeyDesc_GotoFile = "<leader>gf Go to File"

nnoremap <leader>fp :action FindInPath<CR>
let g:WhichKeyDesc_FindInPath = "<leader>fp Find in Path"

nnoremap <leader>fu :action FindUsages<CR>
let g:WhichKeyDesc_FindUsages = "<leader>fu Find Usages"

" nnoremap <leader>s :action GotoRelated<CR>
" let g:WhichKeyDesc_GotoRelated= "<leader>s Go to Related"
nnoremap <leader>h :action CallHierarchy<CR>
let g:WhichKeyDesc_CallHierarchy = "<leader>h Call Hierarchy"

nnoremap <leader>b :action ShowNavBar<CR>
let g:WhichKeyDesc_ShowNavBar = "<leader>b Show Navigation Bar"

nnoremap <c-s> :action FileStructurePopup<CR>

nnoremap gi :action GotoImplementation<CR>
let g:WhichKeyDesc_GotoImplementation= "gi Go to Implementation"

nnoremap gd :action GotoDeclaration<CR>
let g:WhichKeyDesc_GotoDeclaration= "gd Go to Declaration"

nnoremap gp :action GotoSuperMethod<CR>
let g:WhichKeyDesc_GotoSuperMethod= "gp Go to Super Method"

nnoremap gt :action GotoTest<CR>
let g:WhichKeyDesc_GotoTest= "gt Go to Test"

nnoremap gb :action Back<CR>
let g:WhichKeyDesc_Back= "gb Go Back"

nnoremap gf :action Forward<CR>
let g:WhichKeyDesc_Forward= "gf Go Forward"




""" Running and Debugging and Git
nnoremap ,gm :action Git.Menu<CR>
let g:WhichKeyDesc_GitMenu= ",gm Open Git Menu"

nnoremap ,gu :action Vcs.UpdateProject<CR>
let g:WhichKeyDesc_UpdateProject= ",gu Update Project"

nnoremap ,gc :action CheckinProject<CR>
let g:WhichKeyDesc_CheckinProject= ",gc Cheking Project"

nnoremap ,gb :action Git.CompareWithBranch<CR>
let g:WhichKeyDesc_CompareWithBranch= ",gb Compare with Branch"

nnoremap ,ga :action Annotate<CR>
let g:WhichKeyDesc_Annotate= ",ga Show Annotation (Blame)"

nnoremap ,gr :action ChangesView.Revert<CR>
let g:WhichKeyDesc_ChangesViewRevert= ",gr Revert Changes"

nnoremap ,R :action RunAnything<CR>
let g:WhichKeyDesc_RunAnything = ",R   Run Anything"

nnoremap ,r :action ContextRun<CR>
let g:WhichKeyDesc_Prefix = ",r   Prefix"

nnoremap ,c :action RunClass<CR>
let g:WhichKeyDesc_RunClass = ",c   Run Class"

nnoremap ,F :action ChooseRunConfiguration<CR>
let g:WhichKeyDesc_ChooseRunConfiguration = ",F   Choose Run Configuration"

nnoremap ,t :action ActivateRunToolWindow<CR>
let g:WhichKeyDesc_ActivateRunToolWindow = ",t   Activate Run Tool Window"

nnoremap ,u :action Rerun<CR>
let g:WhichKeyDesc_Rerun = ",u   Rerun"

nnoremap ,f :action RerunFailedTests<CR>
let g:WhichKeyDesc_RerunFailedTests = ",f   Rerun Failed Tests"

nnoremap ,b :action ToggleLineBreakpoint<CR>
let g:WhichKeyDesc_ToggleLineBreakpoint = ",b   Toggle Line Breakpoint"

nnoremap ,d :action ContextDebug<CR>
let g:WhichKeyDesc_ContextDebug = ",d   Context Debug"

nnoremap ,n :action ActivateDebugToolWindow<CR>
let g:WhichKeyDesc_ActivateDebugToolWindow = ",n   Activate Debug Tool Window"

