 " Common settings -------------------------
set clipboard+=unnamed " Clipboard sharing for Mac Os
set clipboard+=ideaput
set so=10 " Keep few lines visible when scrolling
set number relativenumber " Set relative line numbers
set timeoutlen=400
set incsearch " Highlight the searching string while typing
set hlsearch "Keep Highlight"
nnoremap <leader>nh :noh<CR>
let g:WhichKeyDesc_clear_highlight = "<leader>nh Clear Highlight"
""" Editing source code
set ideajoin
set idearefactormode=keep
""" The Escape button
inoremap jj <Esc>
""" The Leader Key
let mapleader=" "
""" Editing and Reloading the Config
"--------------------------------------------------------------------------------------------
set clipboard+=unnamed
set clipboard+=ideaput
nnoremap \e 				:e ~/.ideavimrc<CR>
nnoremap \r 				:action IdeaVim.ReloadVimRc.reload<CR>
"--------------------------------------------------------------------------------------------
"
" Distraction Free Mode
nnoremap <c-z> 				:action ToggleDistractionFreeMode<CR>
"--------------------------------------------------------------------------------------------
""" Split Windows like Warp
nnoremap <D-D>        		:action SplitVertically<CR>
nnoremap <D-S-D>        	:action SplitHorizontally<CR>
nnoremap <C-c>      		:action CloseContent<CR>
nnoremap <D-[>        		:action PrevSplitter<CR>
nnoremap <D-]>        		:action NextSplitter<CR>
"nnoremap <C-h>        		:action PrevSplitter<CR>
"nnoremap <C-l>        		:action NextSplitter<CR>

nnoremap <C-S-h>      		:action StretchSplitToLeft<CR>
nnoremap <C-S-j>      		:action StretchSplitToBottom<CR>
nnoremap <C-S-k>      		:action StretchSplitToTop<CR>
nnoremap <C-S-l>      		:action StretchSplitToRight<CR>


nnoremap <TAB> 		  		:action PreviousTab<CR>
nnoremap <s-TAB> 	  		:action NextTab<CR>

nnoremap [[           		:action MethodUp<CR>
nnoremap ]]           		:action MethodDown<CR>
"--------------------------------------------------------------------------------------------
"""" Project 								                                       <leader> p
"--------------------------------------------------------------------------------------------
nnoremap <leader>pc 		:action CloseProject<CR>
let g:WhichKeyDesc_CloseProject = "<leader>pc Close Project"
"--------------------------------------------------------------------------------------------
"""" Region and Font Size                                                                   z
"--------------------------------------------------------------------------------------------
nnoremap zc 				:action CollapseRegion<CR>
let g:WhichKeyDesc_ClollapseRegion= "zc Collaps Region"
nnoremap zo 				:action ExpandRegion<CR>
let g:WhichKeyDesc_ExpandRegion= "zo Expand Region"
nnoremap <leader>zc 		:action CollapseAllRegions<CR>
let g:WhichKeyDesc_CollapseAllRegions= "<leader>zc Collaps All Region"
nnoremap <leader>zo 		:action ExpandAllRegions<CR>
let g:WhichKeyDesc_ExpandAllRegions= "<leader>zo Expand All Region"
nnoremap zr 				:action EditorResetFontSize<CR>
let g:WhichKeyDesc_EditorResetFontSize= "zr Editor Resent Font Size"
nnoremap zi 				:action EditorIncreaseFontSize<CR>
let g:WhichKeyDesc_EditorIncreaseFontSize= "zi Editor Increase Font Size"
nnoremap zd 				:action EditorDecreaseFontSize<CR>
let g:WhichKeyDesc_EditorDecreaseFontSize= "zd Editor Decrease Font Size"
"--------------------------------------------------------------------------------------------
""""  Git                                                                          <leader> g
"--------------------------------------------------------------------------------------------
nnoremap <leader>gg			:action ActivateVersionControlToolWindow<CR>
let g:WhichKeyDesc_ActivateVersionControlToolWindow= "<leader>gg Activate Version Control Tool Window"
nnoremap <leader>gh 		:action Vcs.ShowTabbedFileHistory<CR>
let g:WhichKeyDesc_ShowTabbedFileHistory= "<leader>gh Git History"
nnoremap <leader>gl 		:action Vcs.Show.Log<CR>
let g:WhichKeyDesc_ShowLog= "<leader>gl Show Git Log"
nnoremap <leader>gh 		:action LocalHistory.ShowHistory<CR>
let g:WhichKeyDesc_ShowHistory= "<leader>gh Show Local History"
nnoremap <leader>gm 		:action Git.Menu<CR>
let g:WhichKeyDesc_GitMenu= "<leader>gm Open Git Menu"
nnoremap <leader>gu 		:action Vcs.UpdateProject<CR>
let g:WhichKeyDesc_UpdateProject= "<leader>gu Update Project"
nnoremap <leader>gc 		:action CheckinProject<CR>
let g:WhichKeyDesc_CheckinProject= "<leader>gc Commit"
nnoremap <leader>gb 		:action Git.CompareWithBranch<CR>
let g:WhichKeyDesc_CompareWithBranch= "<leader>gb Compare with Branch"
nnoremap <leader>ga 		:action Annotate<CR>
let g:WhichKeyDesc_Annotate= "<leader>ga Show Annotation (Blame)"
nnoremap <leader>gr 		:action ChangesView.Revert<CR>
let g:WhichKeyDesc_ChangesViewRevert= "<leader>gr Revert Changes"


"--------------------------------------------------------------------------------------------
"""" Window (Navigation Bar, Tool Buttons)                                         <leader> w
"--------------------------------------------------------------------------------------------
nnoremap <leader>wn 		:action ShowNavBar<CR>
let g:WhichKeyDesc_ShowNavBar = "<leader>wn Show Navigation Bar"
nnoremap <leader>wb 		:action ViewToolButtons<CR>
let g:WhichKeyDesc_ViewTooButtons = "<leader>wb Show View Tool Buttons"
nnoremap <leader>wt 		:action ActivateTerminalToolWindow<CR>
let g:WhichKeyDesc_ActivateTerminalToolWindow= "<leader>wt Activate Terminal Tool Window"
nnoremap <leader>wh 		:action HideAllWindows<CR>
let g:WhichKeyDesc_HideAllWindows= "<leader>wh Hide All Windows Show"
nnoremap <leader>wd 		:action ActivateDebugToolWindow<CR>
let g:WhichKeyDesc_ActivateDebugToolWindow = "<leader>wd Activate Debug Tool Window"
nnoremap <leader>wr 		:action ActivateRunToolWindow<CR>
let g:WhichKeyDesc_ActivateRunToolWindow = "<leader>wr Activate Run Tool Window"
nnoremap <leader>wm 		:action ActivateMavenToolWindow<CR>
let g:WhichKeyDesc_ActivateMavenToolWindow= "<leader>wm Activate Run Maven Window"
nnoremap <leader>ws 		:action ActivateServicesToolWindow<CR>
let g:WhichKeyDesc_ActivateServicesToolWindow = "<leader>ws Activate Services Tool Window"
nnoremap <leader>wo 		:action ChangeSplitOrientation<CR>
let g:WhichKeyDesc_ChangeSplitOrientation= "<leader>wo Change Split Orientation"
nnoremap <leader>sm 		:action MaximizeEditorInSplit<CR>
let g:WhichKeyDesc_MaximizeEditorInSplit= "<leader>sm Maximize Editor in Split"

"--------------------------------------------------------------------------------------------
"""" Jump to                                                                       <leader> j
"--------------------------------------------------------------------------------------------
noremap <leader>jl 			:action RecentLocations<CR>
let g:WhichKeyDesc_RecentLocations = "<leader>jl Jump to RecentLocations"

--------------------------------------------------------------------------------------------
"""" Search                                                                        <leader> s
"--------------------------------------------------------------------------------------------
noremap <leader>sg 			:action FindInPath<CR>
let g:WhichKeyDesc_FindInPath = "<leader>sg [s]earch by [g]rep"
nnoremap <leader>sa 		:action SearchEverywhere<CR>
let g:WhichKeyDesc_SearchEverywhere= "<leader>sa [s]earch [a]ll"
noremap <leader>ss 			:action GotoSymbol<CR>
let g:WhichKeyDesc_GotoSymbol = "<leader>ss [s]earch [s]ymbol"
noremap <leader>sc 			:action GotoClass<CR>
let g:WhichKeyDesc_GotoClass = "<leader>sc [s]earch [c]lass"
noremap <leader>sa 			:action GotoAction<CR>
let g:WhichKeyDesc_GotoActions = "<leader>sa [s]earch [a]ction"
noremap <leader>sf 			:action GotoFile<CR>
let g:WhichKeyDesc_GotoFile = "<leader>sf [s]earch [f]ile"
noremap <leader>sr 			:action RecentFiles<CR>
let g:WhichKeyDesc_RecentFiles = "<leader>sr [s]earch [r]ecent files"

"--------------------------------------------------------------------------------------------
"""" Search                                                                        <leader> r
"--------------------------------------------------------------------------------------------
noremap <leader>rf 			:action ReplaceInPath<CR>
let g:WhichKeyDesc_ReplaceInPath= "<leader>rf [r]eplace in [f]iles"

"--------------------------------------------------------------------------------------------
"""" Got to                                                                                 g
"--------------------------------------------------------------------------------------------
nnoremap gi 				:action GotoImplementation<CR>
let g:WhichKeyDesc_GotoImplementation= "gi Go to Implementation"
nnoremap gd 				:action GotoDeclaration<CR>
let g:WhichKeyDesc_GotoDeclaration= "gd Go to Declaration"
nnoremap gt 				:action GotoTest<CR>
let g:WhichKeyDesc_GotoTest= "gt Go to Test"
"--------------------------------------------------------------------------------------------
"""" Code                                                                                   ,
"--------------------------------------------------------------------------------------------
" Code
noremap ,f 					:action ReformatCode<CR>
let g:WhichKeyDesc_ReformatCode= ",f ReformatCode"
nnoremap ,i 				:action OptimizeImports<CR>
let g:WhichKeyDesc_OptimizeImports= ",i Optimize Import"
nnoremap ,c           		:action CompileDirty<CR>
let g:WhichKeyDesc_CompileDirty= ",c Compile Project"
noremap ,rm 				:action Refactorings.QuickListPopupAction<CR>
let g:WhichKeyDesc_QuickListPopupActions= ",rm Refactor Menu"
nnoremap ,qi 				:action QuickImplementations<CR>
let g:WhichKeyDesc_QuickImplementations= ",qi Quick Implementation"

nnoremap K :action QuickJavaDoc<CR>
let g:WhichKeyDesc_Rerun = "K Quick JavaDoc"

nnoremap ,rr 				:action Rerun<CR>
let g:WhichKeyDesc_Rerun = ",rr [r]e[r]un"
nnoremap ,R 				:action ChooseRunConfiguration<CR>
let g:WhichKeyDesc_ChooseRunConfiguration= ",R Choose Run Configuration"
nnoremap ,rs 				:action Stop<CR>
let g:WhichKeyDesc_Stop = ",rs Stop"

" Debug
nnoremap ,d 				:action Debug<CR>
let g:WhichKeyDesc_Debug = ",d Debug"
nnoremap ,D 				:action ChooseDebugConfiguration<CR>
let g:WhichKeyDesc_ChooseDebugConfiguration= ",D Choose Debug Configuration"
" Test
nnoremap ,t 				:action RunClass<CR>
let g:WhichKeyDesc_RunClass= ",t Run whole Test Class"
nnoremap ,T 				:action ContextRun<CR>
let g:WhichKeyDesc_ContextRun= ",T Run current Test"
nnoremap ,rf 				:action RerunFailedTests<CR>
let g:WhichKeyDesc_RerunFailedTests = ",rf Rerun Failed Tests"

"--------------------------------------------------------------------------------------------
"""" Maven                                                                                   m
nnoremap ,mr 				:action Maven.Reimport<CR>
let g:WhichKeyDesc_MavenReimport= ",mr Maven reimport"


"--------------------------------------------------------------------------------------------
"""" Debug		    						                                       <leader> d
"--------------------------------------------------------------------------------------------
noremap <leader>db 			:action ToggleLineBreakpoint<CR>
let g:WhichKeyDesc_ToggleLineBreakpoint = "<leader>db Toggle Line Breakpoint"
noremap <leader>do 			:action StepOver<CR>
let g:WhichKeyDesc_StepOver= "<leader>do StepOver"
noremap <leader>dr 			:action Resume<CR>
let g:WhichKeyDesc_Resume= "<leader>dr Resume"
noremap <leader>di 			:action StepInto<CR>
let g:WhichKeyDesc_StepInto= "<leader>di StepInto"
noremap <leader>dt			:action StepOut<CR>
let g:WhichKeyDesc_StepOut= "<leader>dt StepOut"
noremap <leader>ds			:action Stop<CR>
let g:WhichKeyDesc_Stop= "<leader>ds Stop"
nnoremap <leader>dc 				:action ChooseDebugConfiguration<CR>
let g:WhichKeyDesc_ChooseDebugConfiguration= "<leader>dc Choose Debug Configuration"
"--------------------------------------------------------------------------------------------
" vnoremap < <gv: This mapping is for shifting the selected block of text to the left
vnoremap < <gv
vnoremap > >gv
"--------------------------------------------------------------------------------------------




"--------------------------------------------------------------------------------------------
""" Plugins
"--------------------------------------------------------------------------------------------

"--------------------------------------------------------------------------------------------
""" Harpoon
"--------------------------------------------------------------------------------------------
" https://plugins.jetbrains.com/plugin/20782-harpoonij
nnoremap <leader>hm 		:action HarpoonerAddFile<CR>
let g:WhichKeyDesc_HarpoonerAddFile= "<leader>hm Mark File with harpoon"
nnoremap <leader>hf 		:action ShowHarpoon<CR>
let g:WhichKeyDesc_ShowHarpoon= "<leader>hf Show harpoon mark"
"--------------------------------------------------------------------------------------------



"--------------------------------------------------------------------------------------------
""" Wich-key Plugin
"--------------------------------------------------------------------------------------------
"  https://plugins.jetbrains.com/plugin/15976-which-key
set which-key

set notimeout
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_DefaultDelay = 300
"--------------------------------------------------------------------------------------------



"--------------------------------------------------------------------------------------------
""" Surround plugin
"--------------------------------------------------------------------------------------------
"   https://github.com/tpope/vim-surround/blob/master/doc/surround.txt for details
set surround
" Basic Commands:
"   cs   Change surroundings
"   cst  Change surroundings tag
"   ds   Delete surroundings
"   dst  Delete surroundings tag
"   ys   Surround text object

"--------------------------------------------------------------------------------------------
""" argtextobj plugin
"--------------------------------------------------------------------------------------------
"   https://www.vim.org/scripts/script.php?script_id=2699 for details
set argtextobj
let g:argtextobj_pairs="[:],(:),<:>"
" Text object commands:
"   daa   Delete an argument
"   cia   Change inner argument.
"   via   Select inner argument.

"--------------------------------------------------------------------------------------------
""" exchange plugin
"--------------------------------------------------------------------------------------------
"   https://www.vim.org/scripts/script.php?script_id=2699 for details
"   Emulates exchange.vim. Text exchange
Plug 'tommcdo/vim-exchange'
" Basic Commands:
"   cx    First use to define the exchange, second use defines the second and exchange
"   cxx   Like cx for an entire line
"   X     Like cx for visual mode

"--------------------------------------------------------------------------------------------
""" easy motion plugin
"--------------------------------------------------------------------------------------------
"   https://github.com/AlexPl292/IdeaVim-EasyMotion#supported-commands for details
"   Emulates vim-easymotion
"   Make sure to install IdeaVim-EasyMotion and AceJump Plugins
Plug 'easymotion/vim-easymotion'
" Basic Commands:
"   easy-motion-s Search backward
"   easy-motion-f Search forward
map ,s <Plug>(easymotion-f)
let g:WhichKeyDesc_EasyMotion_f = ",s [s]earch forward"

map ,S <Plug>(easymotion-s)
let g:WhichKeyDesc_EasyMotion_s = ",S [S]earch backward"

"--------------------------------------------------------------------------------------------
""" commentary plugin
"--------------------------------------------------------------------------------------------
"   https://github.com/tpope/vim-commentary
Plug 'tpope/vim-commentary'
" Basic Commands:
"   gcc     to comment out a line
"   gcap    to comment out a paragraph
"   gc      in visual mode to comment out the selection
"   gcu     custom mapping to comment out a line
"--------------------------------------------------------------------------------------------

"--------------------------------------------------------------------------------------------
""" multiple-cursors plugin
"--------------------------------------------------------------------------------------------
"   https://github.com/terryma/vim-multiple-cursors
Plug 'terryma/vim-multiple-cursors'
" Basic Commands:
"   <C-n> start multicursor / Select next match
"   <C-x> Skip next match
"   <C-p> Remove current match and go back to previous one
" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence
" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. ñ
nmap <S-C-n> <Plug>AllWholeOccurrences
xmap <S-C-n> <Plug>AllWholeOccurrences
nmap g<S-C-n> <Plug>AllOccurrences
xmap g<S-C-n> <Plug>AllOccurrences

"--------------------------------------------------------------------------------------------
""" NERDTree plugin
"--------------------------------------------------------------------------------------------
"   https://github.com/preservim/nerdtree
Plug 'preservim/nerdtree'
" Basic Commands:
"   <leader>ee Open NERDTree (mapped below)
"   q          Close the NERDTree window
"   o          Open files, directories and bookmarks
"   go         Open selected file, but leave cursor in the NERDTree
"   i          Open selected file in a split window
"   gi         Same as i, but leave the cursor on the NERDTree
"   s          Open selected file in a new vsplit
"   gs         Same as s, but leave the cursor on the NERDTree
"   <C-J>      Jump down to next sibling of the current directory
"   <C-K>      Jump up to previous sibling of the current directory
"   R          Recursively refresh the current root
"   m          Display the NERDTree menu
map <leader>ee :NERDTreeToggle<CR>
nmap <C-h> :NERDTreeFocus<CR>

"--------------------------------------------------------------------------------------------
""" vim-highlightedyank plugin
"--------------------------------------------------------------------------------------------
"   https://github.com/machakann/vim-highlightedyank
Plug 'machakann/vim-highlightedyank'
" This plugin doesn't provide any commands or mappings, but it automatically highlights yanked text.

"--------------------------------------------------------------------------------------------
""" vim-indent-object plugin
"--------------------------------------------------------------------------------------------
"   https://github.com/michaeljsmith/vim-indent-object
Plug 'michaeljsmith/vim-indent-object'
" Basic Commands:
"   vai    An indentation level and line above. This text object includes the current line, all lines below it that are indented more or the same amount, and the nearest line above that is indented less.
"   vii    Inner indentation level (no line above). This is similar to 'ai', but it doesn't include the line above.
"   vaI    An indentation level and lines above/below. This text object includes the current line, all lines below it that are indented more or the same amount, and all lines above and below that are indented less.
"   viI    Inner indentation level (no lines above/below). This is similar to 'aI', but it doesn't include the lines above and below.
"--------------------------------------------------------------------------------------------
